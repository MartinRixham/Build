#! /bin/bash

set -Eeuo pipefail

RECIPE=recipe.json

DIR=$(dirname $0)

map()
{
	while read line; do
		$@ $line
	done
}

parmap()
{
	while read line; do
		$@ $line &
	done
	wait
}

filter()
{
	while read line; do
		if $($@ $line > /dev/null); then
			echo $line
		fi
	done
}

not()
{
	while read line; do
		if ! $($@ $line > /dev/null); then
			echo $line
		fi
	done
}

verbose()
{
	echo $@
	$@
}

all()
{
	echo $(cat)
}

blank()
{
	echo ''
}

clean()
{
	rm -rf build
}

get_sources()
{
	find $1 -name *.c
}

get_compiler()
{
	$JQ -r .compiler $RECIPE
}

get_name()
{
	$JQ -r .name $RECIPE | echo build/$(cat)
}

make_directory()
{
	mkdir -p build/$(dirname $1)
}

object_file()
{
	echo build/$1.o
}

get_output()
{
	echo $1 | tr '.' ' ' | map object_file
}

get_package()
{
	echo $(pkg-config $1 $2)
}

get_packages()
{
	$JQ -c .dependencies $RECIPE | $JQ -c .[] | $2 | $JQ -r .package | map get_package $1
}

is_test_dependency()
{
	echo $@ | $JQ .scope | grep test
}

source_dependencies()
{
	not is_test_dependency
}

compile()
{
	make_directory $3
	verbose $(get_compiler) -c -o $(get_output $3) $($1) $(get_packages --cflags $2) $3
}

compile_source()
{
	get_sources src | parmap compile blank source_dependencies
}

compile_recipe()
{
	jq --version > /dev/null
	JQ=$(which jq)
	mkdir -p build/src
	compile_source
}

include_source()
{
	echo -Isrc
}

compile_tests()
{
	get_sources test | parmap compile include_source all
}

without_flags()
{
	echo $1
}

link()
{
	verbose $(get_compiler | map without_flags) -o $3 $4 $($1) $(get_packages --libs $2)
}

all_sources()
{
	get_sources src
	get_sources test
}

executable_file()
{
	echo $1
}

get_executable()
{
	echo $1 | tr '.' ' ' | map executable_file
}

get_executable_and_object()
{
	echo $(get_executable $1) $1
}

is_executable()
{
	objdump -d $1 | grep "<main>"
}

get_test_objects()
{
	all_sources | map get_output | not is_executable
}

link_tests()
{
	get_sources test | map get_output | filter is_executable | map get_executable_and_object | map link get_test_objects all
}

run()
{
	verbose $1
}

run_tests()
{
	get_sources test | map get_output | filter is_executable | map get_executable | map run
}

test_recipe()
{
	compile_recipe
	mkdir -p build/test
	compile_tests
	link_tests
	run_tests
}

get_source_objects()
{
	get_sources src | map get_output
}

package_recipe()
{
	test_recipe
	link get_source_objects source_dependencies $(get_name) ''
}

is_validation()
{
	echo $@ | $JQ .phase | grep validate	
}

run_plugin()
{
	source $DIR/$1.chevre $2
}

get_plugin_and_config()
{
	echo $(echo $@ | $JQ -r .name) $(echo $@ | $JQ -c .config)
}

validate_recipe()
{
	package_recipe
    $JQ -c .plugins $RECIPE | $JQ -c .[] | filter is_validation | map get_plugin_and_config | map run_plugin
}

run_recipe()
{
	validate_recipe
	get_name | map run
}

do_task()
{
	case $1 in
		clean) clean;;
		compile) compile_recipe;;
		test) test_recipe;;
		package) package_recipe;;
		validate) validate_recipe;;
		run) run_recipe;;
	esac
}

for task in $@; do
	do_task $task
done
