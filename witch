#! /bin/bash

set -Eeuo pipefail

RECIPE=recipe.json

map()
{
	while read line; do
		$@ $line
	done
}

filter()
{
	while read line; do
		if $($@ $line > /dev/null); then
			echo $line
		fi
	done
}

not()
{
	while read line; do
		if ! $($@ $line > /dev/null); then
			echo $line
		fi
	done
}

verbose()
{
	echo $@
	$@
}

all()
{
	echo $(cat)
}

clean()
{
	rm -rf build
}

get_sources()
{
	find $1 -name *.c
}

get_link()
{
	echo -l$1
}

get_links()
{
	$JQ -c .dependencies $RECIPE | $JQ -c .[] | $1 | $JQ -r .package | map get_link
}

get_compiler()
{
	$JQ -r .compiler $RECIPE
}

get_name()
{
	$JQ -r .name $RECIPE 
}

get_test()
{
	echo test
}

is_test_dependency()
{
	echo $1 | $JQ .scope | grep test
}

source_dependencies()
{
	not is_test_dependency
}

object_file()
{
	echo build/$1.o
}

get_output()
{
	echo $1 | tr '.' ' ' | map object_file
}

compile()
{
	verbose $(get_compiler) -c -o $(get_output $1) $1 
}

compile_source()
{
	get_sources src | map compile
}

compile_recipe()
{
	jq --version > /dev/null
	JQ=$(which jq)
	mkdir -p build/src
	compile_source
}

without_flags()
{
	echo $1
}

is_executable()
{
	objdump -d $1 | grep "<main>"
}

all_sources()
{
	get_sources src
	get_sources test
}

get_objects()
{
	all_sources | map get_output | not is_executable
}

executable_file()
{
	echo $1
}

get_executable()
{
	echo $1 | tr '.' ' ' | map executable_file
}

link()
{
	verbose $(get_compiler | map without_flags) -o $(get_executable $1) $(get_objects) $1 $(get_links all)
}

compile_tests()
{
	get_sources test | map compile
}

link_tests()
{
	get_sources test | map get_output | filter is_executable | map link
}

test_recipe()
{
	compile_recipe
	mkdir -p build/test
	compile_tests
	link_tests
	#build/test/test
}

do_task()
{
	case $1 in
		clean) clean;;
		compile) compile_recipe;;
		test) test_recipe;;
	esac
}

for task in $@; do
	do_task $task
done
