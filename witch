#! /bin/bash

set -Eeuo pipefail

map()
{
	while read line; do
		$@ $line
	done
}

filter()
{
	while read line; do
		if $($@ $line > /dev/null); then
			echo $line
		fi
	done
}

not()
{
	while read line; do
		if ! $($@ $line > /dev/null); then
			echo $line
		fi
	done
}

verbose()
{
	echo $@
	$@
}

collect()
{
	tr '\n' ','
}

split()
{
	tr ',' '\n' | sed '/^$/d'
}

clean()
{
	rm -rf build
}

get_sources()
{
	find $1 -name *.c
}

get_link()
{
	echo -l$1
}

get_links()
{
	echo $1 | split | map get_link
}

compile()
{
	verbose $1 -Wall -o build/$2/$3 $(get_sources $2) $(get_links $4)
}

is_test_dependency()
{
	echo $1 | $JQ .scope | grep test
}

build()
{
	mkdir -p build/src
	echo $3 | $JQ -c .[] | not is_test_dependency | $JQ -r .package | collect | compile $1 src $2 $(cat)
}

get_compiler()
{
	echo $1 | $JQ -r .compiler
}

read_recipe_and_build()
{
	build $(get_compiler $1) $(echo $1 | $JQ -r .name) $(echo $1 | $JQ -c .dependencies)
}

build_recipe()
{
	jq --version > /dev/null
	JQ=$(which jq)
	read_recipe_and_build "$(cat $1 | $JQ -c .)"
}

compile_tests()
{
	compile $(get_compiler $1) test test $(echo $1 | $JQ -c .dependencies | $JQ -c .[] | $JQ -r .package | collect)
}

test_recipe()
{
	build_recipe $1
	mkdir -p build/test
	compile_tests $(cat $1 | $JQ -c .)
	build/test/test
}

do_task()
{
	case $1 in
		clean) clean;;
		build) build_recipe $2;;
		test) test_recipe $2;;
	esac
}

for task in $@; do
	do_task $task recipe.json
done
