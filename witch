#! /bin/bash

set -Eeuo pipefail

map()
{
	while read line; do
		echo $line | $@
	done
}

call()
{
	while read line; do
		$@ $line
	done
}

filter()
{
	while read line; do
		if echo $line | $@; then
			echo $line
		fi
	done
}

not()
{
	while read line; do
		if ! echo $line | $@; then
			echo $line
		fi
	done
}

execute()
{
	echo $@
	$@
}

clean()
{
	rm -rf build
}

is_installed()
{
	brew ls --versions $(cat) > /dev/null
}

install()
{
	echo $1 | not is_installed | call brew install
}

install_make()
{
	echo homebrew/dupes/make | install
}

install_jq()
{
	install jq
	JQ=$(brew --prefix jq)/bin/jq
}

make_directories()
{
	mkdir -p build/src
}

get_sources()
{
	find $1 -name "*.c"
}

get_prefix()
{
	brew --prefix $(cat) 
}

get_includes()
{
	echo $1 | map get_prefix | echo -I$(cat)/include
}

get_link()
{
	echo -L$(echo $1 | get_prefix)/lib -l$1
}

get_links()
{
	echo $1 | call get_link
}

compile()
{
	execute gcc -Wall -o build/$1/$2 $(get_includes $3) $(get_sources $1) $(get_links $3)
}

build()
{
	echo $2 | call install
	make_directories
	compile src $1 $2
}

read_recipe_and_build()
{
	build $(echo $1 | $JQ -r .name) $(echo $1 | $JQ -c .dependencies | $JQ -r .[])
}

make_recipe()
{
	install_jq
	read_recipe_and_build "$(cat $1)"
}

test()
{
	echo $1
	compile test test $1
}

test_recipe()
{
	make_recipe $1
	test $(cat $1 | $JQ -c .dependencies | $JQ -r .[])
}

do_task()
{
	case $1 in
    	clean) clean;;
    	compile) make_recipe $2;;
		test) test_recipe $2;;
	esac
}

for task in $@; do
	do_task $task recipe.json
done
