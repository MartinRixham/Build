#! /bin/bash

set -Eeuo pipefail

call()
{
	while read line; do
		$@ $line
	done
}

map()
{
	while read line; do
		echo $line | $@
	done
}

filter()
{
	while read line; do
		if $($@ $line > /dev/null); then
			echo $line
		fi
	done
}

not()
{
	while read line; do
		if ! $($@ $line > /dev/null); then
			echo $line
		fi
	done
}

verbose()
{
	echo $@
	$@
}

clean()
{
	rm -rf build
}

is_installed()
{
	brew ls --versions $1
}

install()
{
	echo $1 | not is_installed | call brew install
}

install_jq()
{
	install jq
	JQ=$(brew --prefix jq)/bin/jq
}

make_directories()
{
	mkdir -p build/src
}

get_sources()
{
	find $1 -name *.c
}

get_prefix()
{
	brew --prefix $1 
}

get_include()
{
	echo -I$1/include
}

get_includes()
{
	echo $1 | $JQ -c .[] | map $JQ -r .package | call get_prefix | call get_include
}

get_link()
{
	echo -L$(get_prefix $1)/lib -l$1
}

get_links()
{
	echo $1 | $JQ -c .[] | map $JQ -r .package | call get_link
}

compile()
{
	verbose gcc -Wall -o build/$1/$2 $(get_includes $3) $(get_sources $1) $(get_links $3)
}

build()
{
	echo $2 | $JQ -c .[] | map $JQ -r .package | call install
	make_directories
	compile src $1 $2
}

read_recipe_and_build()
{
	build $(echo $1 | $JQ -r .name) $(echo $1 | $JQ -c .dependencies)
}

build_recipe()
{
	install_jq
	read_recipe_and_build "$(cat $1)"
}

test()
{
	compile test test $1
}

test_recipe()
{
	build_recipe $1
	test $(cat $1 | $JQ -c .dependencies)
}

do_task()
{
	case $1 in
    	clean) clean;;
    	build) build_recipe $2;;
		test) test_recipe $2;;
	esac
}

for task in $@; do
	do_task $task recipe.json
done
